name: Check PO Glossary

on:
  pull_request:
    types: [opened, synchronize] # 在 PR 開啟或更新時觸發
    paths:
      - '**.po' # 只在 .po 檔案有變動時才執行

jobs:
  check-glossary:
    runs-on: ubuntu-latest
    # 權限 'pull-requests: write' 同時允許寫入和刪除評論
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed PO files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **.po

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install polib requests

      # ===================================================================
      # [新增步驟] 在執行檢查前，刪除舊的 Bot 評論
      # ===================================================================
      - name: Delete Old Bot Comments
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner, number } = context.issue;
            const bot_login = "github-actions[bot]";

            console.log(`Fetching comments for PR #${number} in ${owner}/${repo}...`);

            // 使用 github.paginate 自動處理分頁，獲取所有評論
            const comments = await github.paginate(github.rest.pulls.listReviewComments, {
              owner,
              repo,
              pull_number: number,
            });

            const bot_comments = comments.filter(comment => comment.user.login === bot_login);

            if (bot_comments.length === 0) {
              console.log("No old comments from this bot to delete.");
              return;
            }

            console.log(`Found ${bot_comments.length} old comments to delete.`);

            // 遍歷並刪除所有找到的 Bot 評論
            for (const comment of bot_comments) {
              console.log(`Deleting comment ID: ${comment.id}`);
              await github.rest.pulls.deleteReviewComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }

            console.log("Successfully deleted all old bot comments.");

      - name: Run Glossary Check Script
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.number }}
          COMMIT_ID: ${{ github.event.pull_request.head.sha }}
        run: |
          python .github/scripts/check_glossary.py .github/glossary.json ${{ steps.changed-files.outputs.all_changed_files }}